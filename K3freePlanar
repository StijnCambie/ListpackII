#list with all permutations of {1,2,3,4,5}
from itertools import permutations
L1 = list(permutations(range(1, 6)))

# function that computes the intersection of two lists
def intersection(lst1, lst2):
    return list(set(lst1) & set(lst2))

#function that returns all derangements of a list 
#Here a derangement is a permutation for which no element remains at the same spot
def derangements(L):
    return ( perm for perm in permutations(L)
             if all(p != L[indx] for indx, p in enumerate(perm)) )


#dictionary with the lists of all derangements of L1 precomputed
dict1={};
for L in L1:
    dict1[L]=list(derangements(L))



#Given 3 neigbhours, we verify that either the colouring cannnot be extended in that vertex, or there are at least 2 ways to do so and those 2 colourings are very different (on every index, a different colour appears)
#Furthermore, the 40 ways which are unextendable are easily characterised

d={};
M=[]

for i in range(1,119):
    for j in range(i+1,120):
        a=len(intersection(intersection(dict1[L1[0]],dict1[L1[i]]),dict1[L1[j]]));
        if a in d.keys():
            d[a]+=1;
        if a not in d.keys():
            d[a]=1;
        if a==2:
            M.append([0,i,j])
d

Z=[]
for [k,i,j] in M:
    Z.append(intersection(intersection(dict1[L1[k]],dict1[L1[i]]),dict1[L1[j]]))

def common(a,b):
    N=0;
    for i in range(5):
        N+=(a[i]==b[i])
    return N;
        
for [a,b] in Z:
    if common(a,b)>0:
        print(a,b)
